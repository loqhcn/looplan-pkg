{
  "compilerOptions": {
    /* 访问 https://aka.ms/tsconfig 以了解更多关于此文件的信息 */
    /* 项目配置 */
    // "incremental": true,  /* 保存 .tsbuildinfo 文件以允许项目进行增量编译 */
    // "composite": true,    /* 启用约束，使 TypeScript 项目可以与项目引用一起使用 */
    // "tsBuildInfoFile": "./.tsbuildinfo",  /* 指定 .tsbuildinfo 增量编译文件的路径 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 在引用复合项目时，禁用优先使用源文件而不是声明文件 */
    // "disableSolutionSearching": true,  /* 在编辑时，选择不进行多项目引用检查 */
    // "disableReferencedProjectLoad": true,  /* 减少 TypeScript 自动加载的项目数量 */
    /* 语言和环境配置 */
    "target": "esnext", /* 设置生成的 JavaScript 语言版本，并包含兼容的库声明 */
    // "lib": [],  /* 指定一组捆绑的库声明文件，描述目标运行时环境 */
    "jsx": "preserve", /* 指定生成的 JSX 代码类型 */
    // "libReplacement": true,  /* 启用库替换 */
    // "experimentalDecorators": true,  /* 启用对旧版实验性装饰器的实验性支持 */
    // "emitDecoratorMetadata": true,  /* 在源文件中为装饰声明发射设计类型元数据 */
    // "jsxFactory": "",  /* 指定在目标为 React JSX 发射时使用的 JSX 工厂函数，例如 'React.createElement' 或 'h' */
    // "jsxFragmentFactory": "",  /* 指定在目标为 React JSX 发射时用于片段的 JSX 片段引用，例如 'React.Fragment' 或 'Fragment' */
    // "jsxImportSource": "",  /* 指定在使用 'jsx: react-jsx*' 时用于导入 JSX 工厂函数的模块说明符 */
    // "reactNamespace": "",  /* 指定为 'createElement' 调用的对象。这仅适用于目标为 'react' JSX 发射时 */
    // "noLib": true,  /* 禁用包含任何库文件，包括默认的 lib.d.ts */
    // "useDefineForClassFields": true,  /* 发射符合 ECMAScript 标准的类字段 */
    // "moduleDetection": "auto",  /* 控制用于检测模块格式 JS 文件的方法 */
    /* 模块配置 */
    "module": "esnext", /* 指定生成的模块代码类型 */
    // "rootDir": "./",  /* 指定源文件所在的根文件夹 */
    // "moduleResolution": "node10",  /* 指定 TypeScript 如何从给定的模块说明符查找文件 */
    // "baseUrl": "./",  /* 指定用于解析非相对模块名称的基目录 */
    "paths": {
      "@/*": [
        "./src/*"
      ],
      "looplan-ui": [
        "D:/work/vue3-component/looplan-ui"
      ],
      "looplan-ui/*": [
        "D:/work/vue3-component/looplan-ui/*"
      ],
      "@packages/*": [
        "./packages/*"
      ]
    }, /* 指定一组条目，将导入重新映射到其他查找位置 */
    // "rootDirs": [],  /* 允许将多个文件夹视为一个整体来解析模块 */
    // "typeRoots": [],  /* 指定多个文件夹，这些文件夹的作用类似于 './node_modules/@types' */
    // "types": [],  /* 指定无需在源文件中引用即可包含的类型包名称 */
    // "allowUmdGlobalAccess": true,  /* 允许从模块访问 UMD 全局变量 */
    // "moduleSuffixes": [],  /* 解析模块时要搜索的文件名后缀列表 */
    // "allowImportingTsExtensions": true,  /* 允许导入包含 TypeScript 文件扩展名的文件。需要设置 '--moduleResolution bundler' 以及 '--noEmit' 或 '--emitDeclarationOnly' */
    // "rewriteRelativeImportExtensions": true,  /* 将相对导入路径中的 '.ts'、'.tsx'、'.mts' 和 '.cts' 文件扩展名重写为其在输出文件中的 JavaScript 等效扩展名 */
    // "resolvePackageJsonExports": true,  /* 在解析包导入时使用 package.json 的 'exports' 字段 */
    // "resolvePackageJsonImports": true,  /* 在解析导入时使用 package.json 的 'imports' 字段 */
    // "customConditions": [],  /* 在解析导入时，除了解析器特定的默认条件之外，还要设置的条件 */
    // "noUncheckedSideEffectImports": true,  /* 检查副作用导入 */
    // "resolveJsonModule": true,  /* 启用导入 .json 文件 */
    // "allowArbitraryExtensions": true,  /* 允许导入任何扩展名的文件，前提是存在声明文件 */
    // "noResolve": true,  /* 禁止 'import'、'require' 或 '<reference>' 扩展 TypeScript 应添加到项目中的文件数量 */
    /* JavaScript 支持配置 */
    // "allowJs": true,  /* 允许 JavaScript 文件成为项目的一部分。使用 'checkJs' 选项可从这些文件中获取错误信息 */
    // "checkJs": true,  /* 在类型检查的 JavaScript 文件中启用错误报告 */
    // "maxNodeModuleJsDepth": 1,  /* 指定用于检查 'node_modules' 中 JavaScript 文件的最大文件夹深度。仅在 'allowJs' 开启时适用 */
    /* 发射配置 */
    "declaration": true, /* 从项目中的 TypeScript 和 JavaScript 文件生成 .d.ts 文件 */
    "declarationDir": "./types", /* 指定生成的声明文件的输出目录 */
    "declarationMap": false, /* 为 .d.ts 文件创建源映射 */
    "emitDeclarationOnly": true, /* 仅输出 .d.ts 文件，不输出 JavaScript 文件 */
    // "sourceMap": true,  /* 为生成的 JavaScript 文件创建源映射文件 */
    // "inlineSourceMap": true,  /* 将源映射文件包含在生成的 JavaScript 中 */
    // "noEmit": true,  /* 禁用编译时文件发射 */
    // "outFile": "./",  /* 指定一个文件，将所有输出捆绑到一个 JavaScript 文件中。如果 'declaration' 为 true，还指定一个文件，将所有 .d.ts 输出捆绑到该文件中 */
    // "outDir": "./",  /* 指定所有生成文件的输出文件夹 */
    // "removeComments": true,  /* 禁用发射注释 */
    // "importHelpers": true,  /* 允许从 tslib 中一次性导入辅助函数，而不是在每个文件中都包含它们 */
    // "downlevelIteration": true,  /* 为迭代发射更符合规范但冗长且性能较低的 JavaScript */
    // "sourceRoot": "",  /* 指定调试器查找参考源代码的根路径 */
    // "mapRoot": "",  /* 指定调试器应查找映射文件的位置，而不是生成的位置 */
    // "inlineSources": true,  /* 将源代码包含在生成的 JavaScript 中的源映射中 */
    // "emitBOM": true,  /* 在输出文件的开头发射 UTF-8 字节顺序标记 (BOM) */
    // "newLine": "crlf",  /* 设置生成文件时使用的换行符 */
    // "stripInternal": true,  /* 禁用发射包含 '@internal' JSDoc 注释的声明 */
    // "noEmitHelpers": true,  /* 禁用在编译输出中生成自定义辅助函数，如 '__extends' */
    // "noEmitOnError": true,  /* 如果报告任何类型检查错误，则禁用文件发射 */
    // "preserveConstEnums": true,  /* 禁用在生成的代码中擦除 'const enum' 声明 */
    // "declarationDir": "./",  /* 指定生成的声明文件的输出目录 */
    /* 互操作性约束配置 */
    // "isolatedModules": true,  /* 确保每个文件都可以在不依赖其他导入的情况下安全地进行转译 */
    // "verbatimModuleSyntax": true,  /* 不转换或省略未标记为仅类型的任何导入或导出，确保它们以基于 'module' 设置的输出文件格式写入 */
    // "isolatedDeclarations": true,  /* 要求导出有足够的注释，以便其他工具可以轻松生成声明文件 */
    // "erasableSyntaxOnly": true,  /* 不允许使用不属于 ECMAScript 的运行时构造 */
    // "allowSyntheticDefaultImports": true,  /* 允许在模块没有默认导出时使用 'import x from y' */
    "esModuleInterop": true, /* 发射额外的 JavaScript 代码，以简化对 CommonJS 模块的导入支持。这会为类型兼容性启用 'allowSyntheticDefaultImports' */
    // "preserveSymlinks": true,  /* 禁用将符号链接解析为其真实路径。这与 node 中的相同标志相关 */
    "forceConsistentCasingInFileNames": true, /* 确保导入中的大小写正确 */
    /* 类型检查配置 */
    "strict": true, /* 启用所有严格的类型检查选项 */
    // "noImplicitAny": true,  /* 对隐含 'any' 类型的表达式和声明启用错误报告 */
    // "strictNullChecks": true,  /* 在类型检查时，考虑 'null' 和 'undefined' */
    // "strictFunctionTypes": true,  /* 在分配函数时，检查以确保参数和返回值是子类型兼容的 */
    // "strictBindCallApply": true,  /* 检查 'bind'、'call' 和 'apply' 方法的参数是否与原始函数匹配 */
    // "strictPropertyInitialization": true,  /* 检查类属性是否在构造函数中声明但未设置 */
    // "strictBuiltinIteratorReturn": true,  /* 内置迭代器使用 'TReturn' 类型 'undefined' 而不是 'any' 进行实例化 */
    // "noImplicitThis": true,  /* 当 'this' 被赋予 'any' 类型时，启用错误报告 */
    // "useUnknownInCatchVariables": true,  /* 默认将 catch 子句变量设为 'unknown' 而不是 'any' */
    // "alwaysStrict": true,  /* 确保始终发射 'use strict' */
    // "noUnusedLocals": true,  /* 当局部变量未被读取时，启用错误报告 */
    // "noUnusedParameters": true,  /* 当函数参数未被读取时，引发错误 */
    // "exactOptionalPropertyTypes": true,  /* 按编写的方式解释可选属性类型，而不是添加 'undefined' */
    // "noImplicitReturns": true,  /* 对函数中未显式返回的代码路径启用错误报告 */
    // "noFallthroughCasesInSwitch": true,  /* 对 switch 语句中的贯穿情况启用错误报告 */
    // "noUncheckedIndexedAccess": true,  /* 在使用索引访问类型时，添加 'undefined' */
    // "noImplicitOverride": true,  /* 确保派生类中的重写成员标记有 override 修饰符 */
    // "noPropertyAccessFromIndexSignature": true,  /* 强制对使用索引类型声明的键使用索引访问器 */
    // "allowUnusedLabels": true,  /* 禁用对未使用标签的错误报告 */
    // "allowUnreachableCode": true,  /* 禁用对无法访问的代码的错误报告 */
    /* 完整性配置 */
    // "skipDefaultLibCheck": true,  /* 跳过对 TypeScript 附带的 .d.ts 文件的类型检查 */
    "skipLibCheck": true /* 跳过对所有 .d.ts 文件的类型检查 */
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "src/**/*.d.ts",
    "example/**/*.ts",
    "example/**/*.tsx",
    "example/**/*.vue",
    "example/**/*.d.ts",
    "packages/**/*",
    "packages/**/*.vue",
    "test/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "lib"
  ]
}